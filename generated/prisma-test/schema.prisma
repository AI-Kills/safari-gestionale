generator testClient {
  provider = "prisma-client-js"
  output   = "../generated/prisma-test"
}

datasource db {
  provider = "sqlite"
  url      = "file:./test.sqlite"
}

model User {
  id       String  @id @default(uuid())
  name     String?
  email    String  @unique
  password String

  @@map("users")
}

model Destinazione {
  id            String          @id @default(uuid())
  nome          String          @unique
  serviziATerra ServiziATerra[]

  @@map("destinazioni")
}

model Banca {
  id                        String                      @id @default(uuid())
  nome                      String                      @unique
  incassi_partecipanti      incassi_partecipanti[]
  pagamenti_assicurazioni   pagamenti_assicurazioni[]
  pagamenti_servizi_a_terra pagamenti_servizi_a_terra[]
  pagamenti_voli            pagamenti_voli[]

  @@map("banche")
}

model Cliente {
  id                       String       @id @default(uuid())
  nome                     String?
  cognome                  String?
  tel                      String?
  indirizzo                String?
  cap                      String?
  citta                    String?
  cf                       String?
  email                    String       @unique
  tipo                     String?
  provenienza              String?
  collegato                String?
  note                     String?
  data_di_nascita          DateTime?
  luogo_nascita            String?
  provincia_nascita        String?
  numero_passaporto        String?
  data_scadenza_passaporto DateTime?
  nazionalita              String?
  provincia                String?
  sesso                    String?
  pratiche                 pratiche[]
  preventivi               Preventivo[]

  @@map("clienti")
}

model Fornitore {
  id            String          @id @default(uuid())
  nome          String          @unique
  valuta        String?
  assicurazioni Assicurazione[]
  serviziATerra ServiziATerra[]
  voli          Volo[]

  @@map("fornitori")
}

model Preventivo {
  id                   String                @id @default(uuid())
  id_cliente           String
  percentuale_ricarico Float?
  note                 String?
  brand                String?
  adulti               Int?
  bambini              Int?
  destinazione         String?
  tipo_viaggio         String?
  note_operative       String?
  riferimento          String?
  data_partenza        DateTime?
  operatore            String?
  feedback             String?
  stato                String?
  data                 DateTime?             @default(now())
  numero_preventivo    String?               @unique
  assicurazioni        Assicurazione[]
  partecipanti         partecipanti[]
  pratiche             pratiche[]
  cliente              Cliente               @relation(fields: [id_cliente], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventiviAlCliente  PreventivoAlCliente[]
  serviziATerra        ServiziATerra[]
  voli                 Volo[]

  @@map("preventivi")
}

model ServiziATerra {
  id                        String                      @id @default(uuid())
  id_preventivo             String
  id_fornitore              String?
  id_destinazione           String?
  descrizione               String?
  data                      DateTime?
  numero_notti              Int?
  numero_camere             Int?
  totale                    Float?
  valuta                    String?
  cambio                    Float?
  ricarico                  Float?
  servizio_aggiuntivo       Boolean?
  pagamenti_servizi_a_terra pagamenti_servizi_a_terra[]
  destinazione              Destinazione?               @relation(fields: [id_destinazione], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fornitore                 Fornitore?                  @relation(fields: [id_fornitore], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventivo                Preventivo                  @relation(fields: [id_preventivo], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("servizi_a_terra")
}

model Volo {
  id              String           @id @default(uuid())
  id_preventivo   String
  id_fornitore    String?
  compagnia_aerea String?
  descrizione     String?
  data_partenza   DateTime?
  data_arrivo     DateTime?
  totale          Float?
  ricarico        Float?
  numero          Int?
  valuta          String?
  cambio          Float?
  pagamenti_voli  pagamenti_voli[]
  fornitore       Fornitore?       @relation(fields: [id_fornitore], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventivo      Preventivo       @relation(fields: [id_preventivo], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("voli")
}

model Assicurazione {
  id                      String                    @id @default(uuid())
  id_preventivo           String
  id_fornitore            String?
  assicurazione           String?
  netto                   Float?
  ricarico                Float?
  numero                  Int?
  fornitore               Fornitore?                @relation(fields: [id_fornitore], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventivo              Preventivo                @relation(fields: [id_preventivo], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pagamenti_assicurazioni pagamenti_assicurazioni[]

  @@map("assicurazioni")
}

model PreventivoAlCliente {
  id                  String                   @id @default(uuid())
  id_preventivo       String?
  descrizione_viaggio String?
  preventivo          Preventivo?              @relation(fields: [id_preventivo], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rows                PreventivoAlClienteRow[]

  @@map("preventivi_al_cliente")
}

model PreventivoAlClienteRow {
  id                       String              @id @default(uuid())
  id_preventivo_al_cliente String
  senza_assicurazione      Boolean?
  destinazione             String?
  descrizione              String?
  individuale              Float?
  numero                   Int?
  is_primo_tipo            Boolean?
  preventivoAlCliente      PreventivoAlCliente @relation(fields: [id_preventivo_al_cliente], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("preventivi_al_cliente_row")
}

model blog_article_comments {
  id           String    @id @default(uuid())
  article_id   String
  user_id      String
  content      String
  date_created DateTime? @default(now())
}

model blog_articles_ai {
  id           String    @id @default(uuid())
  title        String
  content      String
  date_created DateTime? @default(now())
}

model customers {
  id        String @id @default(uuid())
  name      String
  email     String
  image_url String
}

model incassi_partecipanti {
  id              String       @id @default(uuid())
  id_partecipante String
  id_banca        String?
  importo         Float?
  data_scadenza   DateTime?
  data_incasso    DateTime?
  banche          Banca?       @relation(fields: [id_banca], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partecipanti    partecipanti @relation(fields: [id_partecipante], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model invoices {
  id          String   @id @default(uuid())
  customer_id String
  amount      Int
  status      String
  date        DateTime
}

model pagamenti_assicurazioni {
  id               String        @id @default(uuid())
  id_assicurazione String
  id_banca         String?
  importo          Float?
  data_scadenza    DateTime?
  data_incasso     DateTime?
  assicurazioni    Assicurazione @relation(fields: [id_assicurazione], references: [id], onDelete: NoAction, onUpdate: NoAction)
  banche           Banca?        @relation(fields: [id_banca], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pagamenti_servizi_a_terra {
  id                  String        @id @default(uuid())
  id_servizio_a_terra String
  id_banca            String?
  importo             Float?
  data_scadenza       DateTime?
  data_incasso        DateTime?
  banche              Banca?        @relation(fields: [id_banca], references: [id], onDelete: NoAction, onUpdate: NoAction)
  servizi_a_terra     ServiziATerra @relation(fields: [id_servizio_a_terra], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pagamenti_voli {
  id            String    @id @default(uuid())
  id_volo       String
  id_banca      String?
  importo       Float?
  data_scadenza DateTime?
  data_incasso  DateTime?
  banche        Banca?    @relation(fields: [id_banca], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voli          Volo      @relation(fields: [id_volo], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model partecipanti {
  id                   String                 @id @default(uuid())
  id_preventivo        String
  nome                 String?
  cognome              String?
  tot_quota            Float?
  incassi_partecipanti incassi_partecipanti[]
  preventivi           Preventivo             @relation(fields: [id_preventivo], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pratiche {
  id                String     @id @default(uuid())
  id_preventivo     String
  id_cliente        String?
  data_conferma     DateTime?
  data_partenza     DateTime?
  data_rientro      DateTime?
  note              String?
  numero_passeggeri Int?
  totale            Float?
  clienti           Cliente?   @relation(fields: [id_cliente], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preventivi        Preventivo @relation(fields: [id_preventivo], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model preventivi_mostrare_clienti {
  id                String  @id @default(uuid())
  id_preventivo     String
  id_destinazione   String
  descrizione       String?
  tipo              String?
  costo_individuale Float?
  importo_vendita   Float?
  totale            Float?
}

model revenue {
  month   String @unique
  revenue Int
}
