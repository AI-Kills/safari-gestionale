name: Test Authentication and Backup Verification
on:
  workflow_dispatch:  # Solo esecuzione manuale

jobs:
  test-auth:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Install PostgreSQL client
        run: |
          echo "🔧 Installing PostgreSQL 17 client..."
          
          # Rimuovi eventuali versioni precedenti
          sudo apt-get remove -y postgresql-client postgresql-client-* || true
          
          # Aggiungi repository PostgreSQL ufficiale
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates lsb-release
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          
          # Installa PostgreSQL 17 client
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          
          # Forza l'uso della versione 17
          export PATH="/usr/lib/postgresql/17/bin:$PATH"
          echo "✅ PostgreSQL 17 installed: $(/usr/lib/postgresql/17/bin/pg_dump --version)"
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/801491773595/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: backup-service@mutuo-soccorso.iam.gserviceaccount.com
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Test Database Backup with Verification
        env:
          PROD_DB_URL: ${{ secrets.PROD_DB_URL }}
        run: |
          echo "🔧 Testing database backup with data verification..."
          
          # Forza l'uso di PostgreSQL 17
          export PATH="/usr/lib/postgresql/17/bin:$PATH"
          
          # Verifica connessione database
          echo "📡 Testing database connection..."
          if ! pg_isready -d "$PROD_DB_URL"; then
            echo "❌ Database connection failed!"
            exit 1
          fi
          
          # Query di test per verificare che "alfredo ingraldo" esista
          echo "🔍 Checking if 'alfredo ingraldo' exists in database..."
          ALFREDO_COUNT=$(psql "$PROD_DB_URL" -t -c "SELECT COUNT(*) FROM soci WHERE LOWER(nome || ' ' || cognome) LIKE '%alfredo%ingraldo%' OR LOWER(nome || ' ' || cognome) LIKE '%ingraldo%alfredo%';")
          ALFREDO_COUNT=$(echo $ALFREDO_COUNT | tr -d ' ')
          
          echo "📊 Found $ALFREDO_COUNT records matching 'alfredo ingraldo'"
          
          if [ "$ALFREDO_COUNT" -eq "0" ]; then
            echo "⚠️ 'alfredo ingraldo' not found in database - backup test will show if data is missing"
          else
            echo "✅ 'alfredo ingraldo' found in database - will verify in backup"
          fi
          
          # Crea backup di test
          echo "📦 Creating test backup..."
          TIMESTAMP=$(date +"%Y-%m-%dT%H-%M-%S")
          BACKUP_FILE="test-backup-${TIMESTAMP}.sql"
          
          if ! pg_dump "$PROD_DB_URL" > "$BACKUP_FILE"; then
            echo "❌ pg_dump failed!"
            exit 1
          fi
          
          # Verifica dimensione backup
          FILESIZE=$(stat -c%s "$BACKUP_FILE" 2>/dev/null || echo "0")
          echo "📊 Backup file size: $FILESIZE bytes"
          
          if [ "$FILESIZE" -lt 1000 ]; then
            echo "❌ Backup file too small!"
            exit 1
          fi
          
          # VERIFICA CRITICA: Cerca "alfredo ingraldo" nel backup
          echo "🔍 Searching for 'alfredo ingraldo' in backup file..."
          
          # Cerca varianti del nome (case insensitive)
          ALFREDO_IN_BACKUP=0
          
          if grep -i "alfredo.*ingraldo" "$BACKUP_FILE" > /dev/null; then
            ALFREDO_IN_BACKUP=1
            echo "✅ Found 'alfredo ingraldo' in backup!"
            echo "📄 Context from backup:"
            grep -i -A2 -B2 "alfredo.*ingraldo" "$BACKUP_FILE" | head -10
          elif grep -i "ingraldo.*alfredo" "$BACKUP_FILE" > /dev/null; then
            ALFREDO_IN_BACKUP=1
            echo "✅ Found 'ingraldo alfredo' in backup!"
            echo "📄 Context from backup:"
            grep -i -A2 -B2 "ingraldo.*alfredo" "$BACKUP_FILE" | head -10
          elif grep -i "alfredo" "$BACKUP_FILE" > /dev/null; then
            echo "⚠️ Found 'alfredo' but not full name. Showing matches:"
            grep -i -A1 -B1 "alfredo" "$BACKUP_FILE" | head -10
          elif grep -i "ingraldo" "$BACKUP_FILE" > /dev/null; then
            echo "⚠️ Found 'ingraldo' but not full name. Showing matches:"
            grep -i -A1 -B1 "ingraldo" "$BACKUP_FILE" | head -10
          else
            echo "❌ 'alfredo ingraldo' NOT found in backup!"
            echo "📊 Backup contains $(wc -l < "$BACKUP_FILE") lines"
            echo "🔍 First 20 lines of backup:"
            head -20 "$BACKUP_FILE"
            echo "..."
            echo "🔍 Last 20 lines of backup:"
            tail -20 "$BACKUP_FILE"
          fi
          
          # Test upload a GCS
          echo "☁️ Testing upload to Google Cloud Storage..."
          if gcloud storage cp "$BACKUP_FILE" "gs://mutuo-soccorso-backups/"; then
            echo "✅ Upload successful!"
            
            # Verifica che il file sia su GCS
            gcloud storage ls "gs://mutuo-soccorso-backups/$BACKUP_FILE" && echo "✅ File verified on GCS"
            
            # Cleanup
            gcloud storage rm "gs://mutuo-soccorso-backups/$BACKUP_FILE" && echo "🗑️ Test file cleaned from GCS"
          else
            echo "❌ Upload failed!"
            exit 1
          fi
          
          # Cleanup locale
          rm "$BACKUP_FILE"
          
          # Riassunto finale
          echo ""
          echo "🎯 === RISULTATI TEST ==="
          echo "Database connection: ✅"
          echo "PostgreSQL 17 client: ✅"
          echo "Backup creation: ✅"
          echo "Backup size: $FILESIZE bytes ✅"
          echo "GCS upload: ✅"
          
          if [ "$ALFREDO_IN_BACKUP" -eq "1" ]; then
            echo "Alfredo Ingraldo in backup: ✅"
            echo ""
            echo "🎉 SUCCESSO! Il backup cattura correttamente i dati più recenti!"
          else
            echo "Alfredo Ingraldo in backup: ❌"
            echo ""
            echo "⚠️ Il backup non contiene 'alfredo ingraldo' - verifica i dati nel database"
          fi
